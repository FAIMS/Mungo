    
/****** 
 FAIMS Logic File generated by Heurist Vsn 3.1.6, Wednesday 12th of March 2014 03:34:42 AM
 Database: hdb_nstern_FeatureRecording   Heurist user:Adela Sobotkova
 ******/

User user;
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

// showWarning("Ver 15. Thanks for trying this module!", "This module has been generated from a Heurist database structure. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

/*** EVENTS ***/
onEvent("control", "show", "refreshGrids()");
onEvent("control", "load", "loadHearthAttributes()");
onEvent("control", "load", "loadHearthAssociatedAttributes()");

onEvent("control/grid/addGrid", "click", "newGrid()");
onEvent("control/grid/GridList", "click", "loadGrid()");

/** RelnEnt: Grid Square **/
onEvent("Grid/Grid", "show", "refreshFeatures()");
onEvent("Grid/Grid/Update", "delayclick", "saveGrid()");
onEvent("Grid/Grid/addHearth", "click", "newHearth()");
onEvent("Grid/Features/FeatureList", "click", "loadHearth()");

String grid_id = null;

newGrid(){
    grid_id = null;
    newTabGroup("Grid");
}
loadGrid() {
    grid_id = getListItemValue();
    loadGridFrom(grid_id);
}
loadGridFrom(entid) {
    grid_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Grid", entid);    
}

saveGrid() {
    if (isNull(getFieldValue("Grid/Grid/Name"))) { 
        showWarning("Validation Error", "Cannot save Grid Square without identifier.");
        showTabGroup("Grid");
        return;
    }
    if (!isNull(grid_id)) {
        entity = fetchRel(grid_id);
    }
    saveTabGroup("Grid", grid_id, null, null, "grid_id = getLastSavedRecordId();");
}

refreshGrids() {
    populateList("control/grid/GridList", fetchRelationshipList("Grid"));
}

refreshFeatures(){
    if (!isNull(grid_id)){
        featuresInGrid = fetchAll("select uuid, freetext " +
        "from latestNonDeletedArchEntIdentifiers " +
        "where uuid in (select uuid " +
                "from latestnondeletedaentreln " +
                "where relationshipid = '" + grid_id+ "');");
        print(featuresInGrid);
        populateList("Grid/Features/FeatureList", featuresInGrid);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Grid/Features/FeatureList",  empty);
    }
}

/** ArchEnt: HEARTH **/
onEvent("Hearth/Admin/Update", "delayclick", "saveHearth()");
onEvent("Hearth/Admin/Delete", "delayclick", "deleteHearth()");

onEvent("Hearth/Associated_materials/addAssociated", "delayclick", "newHearthAssociated()");
onEvent("Hearth/Associated_materials/AssociatedList", "click", "loadHearthAssociated()");
onEvent("Hearth", "show", "refreshHearthAssociated()");

onEvent("Hearth/Topography/attachPhoto", "click", "attachPictureTo(\"Hearth/Topography/Photos\")");
onEvent("Hearth/Topography/Update", "delayclick", "saveHearth()");
onEvent("Hearth/Topography/Delete", "delayclick", "deleteHearth()");

String hearth_id = null;

newHearth(){
    hearth_id = null;
    newTabGroup("Hearth");
    saveGrid();
}
loadHearth() {
    hearth_id = getListItemValue();
    loadHearthFrom(hearth_id);
}
loadHearthFrom(entid) {
    hearth_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Hearth", entid);    
}

saveHearth() {
    if (isNull(getFieldValue("Hearth/Admin/ID"))) { 
        showWarning("Validation Error", "Cannot save Hearth without identifier.");
        showTabGroup("Hearth");
        return;
    }
    if (!isNull(hearth_id)) {
        entity = fetchArchEnt(hearth_id);
    }
    saveTabGroup("Hearth", hearth_id, null, null, "hearth_id = getLastSavedRecordId();addReln(hearth_id, grid_id, \"Grid\");");
}

deleteHearth(){
    if (!isNull(hearth_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Hearth!", "reallyDeleteHearth()", "doNotDelete()");
    } else {
        cancelTabGroup("Hearth", false);
    }
}

reallyDeleteHearth(){
    deleteArchEnt(hearth_id);
    cancelTabGroup("Hearth", false);
}

refreshHearthAssociated() {
    if (!isNull(hearth_id)){
        associatedHearth = fetchAll("select relationshipid, group_concat(VocabName)" +
            "from (select relationshipid, vocabname, freetext " +
                "from latestnondeletedrelnidentifiers " +
                "where relntypename = 'HearthAssociated'" + 
                "and relationshipid in (select relationshipid " +
                                        "from latestnondeletedaentreln " +
                                        "where uuid = " + hearth_id + ")" +
               ")" +
        "group by relationshipid;");
        print(associatedHearth);
        populateList("Hearth/Associated_materials/AssociatedList", associatedHearth);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Hearth/Associated_materials/AssociatedList",  empty);
    }
}

loadHearthAttributes() {
    populateHierarchicalPictureGallery("Hearth/Admin/HearthType", "Hearth Type");
    populatePictureGallery("Hearth/Admin/Charcoal", makePictureGallery("Charcoal"));
    populatePictureGallery("Hearth/Admin/DegreeInSitu", makePictureGallery("Degree in situ"));
    populatePictureGallery("Hearth/Topography/TopoSetting", makePictureGallery("Topo setting"));
    populatePictureGallery("Hearth/Topography/Sediments", makePictureGallery("Sediments"));
    populatePictureGallery("Hearth/Topography/Vulnerability", makePictureGallery("Vulnerability"));
    populatePictureGallery("Hearth/Topography/PalaeotopSetting", makePictureGallery("Palaeotop setting"));
    populateDropDown("Hearth/Topography/TypesOfPhotographsTaken", makeVocab("Types of Photographs taken"));
}

/** RelnEnt: Associated Hearths **/
onEvent("HearthAssociated", "show", "updateTabs()");

onEvent("HearthAssociated/AssociatedMaterial/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/Lacustrine/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/Eggshell/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/TerrestrialBone/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/OtherWork/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/Artefact/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/ChippedStone/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/RetouchedStone/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/GroundMaterial/Update", "delayclick", "saveHearthAssociated()");
onEvent("HearthAssociated/UnmodifiedStone/Update", "delayclick", "saveHearthAssociated()");

onEvent("HearthAssociated/AssociatedMaterial/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/Lacustrine/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/Eggshell/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/TerrestrialBone/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/OtherWork/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/Artefact/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/ChippedStone/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/RetouchedStone/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/GroundMaterial/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");
onEvent("HearthAssociated/UnmodifiedStone/UpdateAndClose", "delayclick", "saveAndCloseHearthAssociated()");

onEvent("HearthAssociated/AssociatedMaterial/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/Lacustrine/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/Eggshell/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/TerrestrialBone/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/OtherWork/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/Artefact/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/ChippedStone/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/RetouchedStone/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/GroundMaterial/Delete", "delayclick", "deleteHearthAssociated()");
onEvent("HearthAssociated/UnmodifiedStone/Delete", "delayclick", "deleteHearthAssociated()");

onEvent("HearthAssociated/AssociatedMaterial/AssociatedMaterial", "click", "showHearthMaterialType();");
onEvent("HearthAssociated/Artefact/AssociatedArtefacts", "click", "showHearthArtefactType();");
onEvent("HearthAssociated/ChippedStone/CSTypes", "click", "showHearthChippedStoneType();");


String hearth_associated_id = null;

newHearthAssociated(){
    hearth_associated_id = null;
    newTabGroup("HearthAssociated");
    saveHearth();
}
loadHearthAssociated() {
    hearth_associated_id = getListItemValue();
    loadHearthAssociatedFrom(hearth_associated_id);
}
loadHearthAssociatedFrom(entid) {
    hearth_associated_id = entid;
    if (isNull(entid)) return;
    showTabGroup("HearthAssociated", entid);
}

saveHearthAssociated() {
    if (isNull(getFieldValue("HearthAssociated/AssociatedMaterial/AssociatedMaterial"))) { 
        showWarning("Validation Error", "Cannot save Associated Hearth Material without type.");
        showTabGroup("HearthAssociated");
        return;
    }
    if (!isNull(hearth_associated_id)) {
        entity = fetchRel(hearth_associated_id);
    }
    saveTabGroup("HearthAssociated", hearth_associated_id, null, null, "hearth_associated_id = getLastSavedRecordId();addReln(hearth_id, hearth_associated_id, \"HearthAssociated\");");
}

saveAndCloseHearthAssociated(){
    if (isNull(getFieldValue("HearthAssociated/AssociatedMaterial/AssociatedMaterial")) && !(getFieldValue("HearthAssociated/AssociatedMaterial/AssociatedMaterial").equals("None"))) { 
        showWarning("Validation Error", "Cannot save Associated Hearth Material without type.");
        showTabGroup("HearthAssociated");
        return;
    }
    if (!isNull(hearth_associated_id)) {
        entity = fetchArchEnt(hearth_associated_id);
    }
    saveTabGroup("HearthAssociated", hearth_associated_id, null, null, "hearth_associated_id = getLastSavedRecordId();addReln(hearth_id, hearth_associated_id, \"HearthAssociated\");cancelTabGroup(\"HearthAssociated\", false);");
}

deleteHearthAssociated(){
    if (!isNull(hearth_associated_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Associated Hearth Material!", "reallyDeleteHearthAssociated()", "doNotDelete()");
    } else {
        cancelTabGroup("HearthAssociated", false);
    }
}

reallyDeleteHearthAssociated(){
    deleteArchEnt(hearth_id);
    cancelTabGroup("HearthAssociated", false);
}

loadHearthAssociatedAttributes(){
    populateDropDown("HearthAssociated/AssociatedMaterial/AssociatedMaterial", makeVocab("Associated material"));
    populatePictureGallery("HearthAssociated/Lacustrine/LacustrineMaterial", makePictureGallery("Lacustrine Material"));
    populateRadioGroup("HearthAssociated/Lacustrine/BurntLacustrineMaterial", makeVocab("Burnt lacustrine material"));
    populatePictureGallery("HearthAssociated/Eggshell/AssociatedEggshell", makePictureGallery("Associated eggshell"));
    populateRadioGroup("HearthAssociated/Eggshell/BurntEggshell", makeVocab("Burnt eggshell"));
    populatePictureGallery("HearthAssociated/TerrestrialBone/AssociatedTerrestrialBone", makePictureGallery("Associated terrestrial bone"));
    populateRadioGroup("HearthAssociated/TerrestrialBone/BurntBone", makeVocab("Burnt bone"));
    populatePictureGallery("HearthAssociated/OtherWork/OtherWorkedMaterial", makePictureGallery("Other worked material"));
    populateDropDown("HearthAssociated/Artefact/AssociatedArtefacts", makeVocab("Associated artefacts"));
    populatePictureGallery("HearthAssociated/Artefact/ArtefactRawMaterial", makePictureGallery("Artefact raw material"));
    populateDropDown("HearthAssociated/ChippedStone/CSTypes", makeVocab("CS types"));
    populatePictureGallery("HearthAssociated/RetouchedStone/RUTypes", makePictureGallery("RU types"));
    populatePictureGallery("HearthAssociated/GroundMaterial/GroundMaterial", makePictureGallery("Ground material"));
    populateRadioGroup("HearthAssociated/GroundMaterial/GroundMaterialStatus", makeVocab("Ground material status"));
    populatePictureGallery("HearthAssociated/UnmodifiedStone/UnmodTypes", makePictureGallery("Unmod types"));
}

showHearthMaterialType() {
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("HearthAssociated/AssociatedMaterial/AssociatedMaterial")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        print(vocab);
        if(vocab.equals("{lacust_}")) {
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{terrbone_}")) {
            showTab("HearthAssociated/TerrestrialBone");
        } else if(vocab.equals("{eggshell_}")) {
            showTab("HearthAssociated/Eggshell");
        } else if(vocab.equals("{artefacts_}")) {
            showTab("HearthAssociated/Artefact");
        } else if(vocab.equals("{lacandbone_}")) {
            showTab("HearthAssociated/TerrestrialBone");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{lacandegg_}")) {
            showTab("HearthAssociated/Eggshell");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{lacandart_}")) {
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{boneandegg_}")) {
            showTab("HearthAssociated/TerrestrialBone");
            showTab("HearthAssociated/Eggshell");
        } else if(vocab.equals("{boneandart_}")) {
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/TerrestrialBone");
        } else if(vocab.equals("{eggandart_}")) {
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/Eggshell");
        } else if(vocab.equals("{lacbonegg_}")) {
            showTab("HearthAssociated/TerrestrialBone");
            showTab("HearthAssociated/Eggshell");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{lacbonart_}")) {
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{laceggart_}")) {
            showTab("HearthAssociated/Eggshell");
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{boneggart_}")) {
            showTab("HearthAssociated/TerrestrialBone");
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/Eggshell");
        } else if(vocab.equals("{all_}")) {
            showTab("HearthAssociated/TerrestrialBone");
            showTab("HearthAssociated/Eggshell");
            showTab("HearthAssociated/Artefact");
            showTab("HearthAssociated/Lacustrine");
        } else if(vocab.equals("{otherwork}")) {
            showTab("HearthAssociated/OtherWork");
        }
    }
}

showHearthArtefactType() {
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("HearthAssociated/Artefact/AssociatedArtefacts")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        if(vocab.equals("{cs_}")) {
            showTab("HearthAssociated/ChippedStone");
        } else if(vocab.equals("{um_}")) {
            showTab("HearthAssociated/UnmodifiedStone");
        } else if(vocab.equals("{ground_}")) {
            showTab("HearthAssociated/GroundMaterial");
        } else if(vocab.equals("{csum_}")) {
            showTab("HearthAssociated/ChippedStone");
        } else if(vocab.equals("{csgs_}")) {
            showTab("HearthAssociated/GroundMaterial");
            showTab("HearthAssociated/ChippedStone");
        } else if(vocab.equals("{csumgs_}")) {
            showTab("HearthAssociated/GroundMaterial");
            showTab("HearthAssociated/UnmodifiedStone");
            showTab("HearthAssociated/ChippedStone");
        } else if(vocab.equals("{umgs}")) {
            showTab("HearthAssociated/UnmodifiedStone");
            showTab("HearthAssociated/GroundMaterial");
        }
    }
}

showHearthChippedStoneType() {
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("HearthAssociated/ChippedStone/CSTypes")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        if(vocab.equals("{ru_}")
        || vocab.equals("{ruco_}")
        || vocab.equals("{rudeb_}")
        || vocab.equals("{ruhammer_}") 
        || vocab.equals("{ruindet_}") 
        || vocab.equals("{rucodeb_}") 
        || vocab.equals("{rucoindet_}") 
        || vocab.equals("{rudebindet_}")) {
            showTab("HearthAssociated/RetouchedStone");
        }
    }
}

updateTabs() {
    showTab("HearthAssociated/Lacustrine");
    showTab("HearthAssociated/Eggshell");
    showTab("HearthAssociated/TerrestrialBone");
    showTab("HearthAssociated/OtherWork");
    showTab("HearthAssociated/Artefact");
    showTab("HearthAssociated/ChippedStone");
    showTab("HearthAssociated/RetouchedStone");
    showTab("HearthAssociated/GroundMaterial");
    showTab("HearthAssociated/UnmodifiedStone");
    cancelTab("HearthAssociated/Lacustrine", false);
    cancelTab("HearthAssociated/Eggshell", false);
    cancelTab("HearthAssociated/TerrestrialBone", false);
    cancelTab("HearthAssociated/OtherWork", false);
    cancelTab("HearthAssociated/Artefact", false);
    cancelTab("HearthAssociated/ChippedStone", false);
    cancelTab("HearthAssociated/RetouchedStone", false);
    cancelTab("HearthAssociated/GroundMaterial", false);
    cancelTab("HearthAssociated/UnmodifiedStone", false);
    showHearthArtefactType();
    showHearthMaterialType();
    showHearthChippedStoneType();
    showTab("HearthAssociated/AssociatedMaterial");
}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "';");
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

onEvent("user/usertab/users", "click", "login()");