    
/****** 
 FAIMS Logic File generated by Heurist Vsn 3.1.6, Wednesday 12th of March 2014 03:34:42 AM
 Database: hdb_nstern_FeatureRecording   Heurist user:Adela Sobotkova
 ******/

User user;
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

// showWarning("Ver 15. Thanks for trying this module!", "This module has been generated from a Heurist database structure. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

/*** EVENTS ***/
onEvent("control", "show", "refreshGrids()");
onEvent("control", "load", "loadHearthAttributes()");

onEvent("control/grid/addGrid", "click", "newGrid()");
onEvent("control/grid/GridList", "click", "loadGrid()");

/** RelnEnt: Grid Square **/
onEvent("Grid/Grid", "show", "refreshFeatures()");
onEvent("Grid/Grid/Update", "delayclick", "saveGrid()");
onEvent("Grid/Grid/addHearth", "click", "newHearth()");
onEvent("Grid/Features/FeatureList", "click", "loadHearth()");

String grid_id = null;

newGrid(){
    grid_id = null;
    newTabGroup("Grid");
}
loadGrid() {
    grid_id = getListItemValue();
    loadGridFrom(grid_id);
}
loadGridFrom(entid) {
    grid_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Grid", entid);    
}

saveGrid() {
    if (isNull(getFieldValue("Grid/Grid/Name"))) { 
        showWarning("Validation Error", "Cannot save Grid Square without identifier.");
        showTabGroup("Grid");
        return;
    }
    if (!isNull(grid_id)) {
        entity = fetchArchEnt(grid_id);
    }
    saveTabGroup("Grid", grid_id, null, null, "grid_id = getLastSavedRecordId();");
}

refreshGrids() {
    populateList("control/grid/GridList", fetchRelationshipList("Grid"));
}

refreshFeatures(){
    if (!isNull(grid_id)){
        featuresInGrid = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Hearth'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+grid_id+"\n"+
        "                                                       and relntypeName = 'Grid')\n"+
        "                             and uuid != "+grid_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Grid/Features/FeatureList", featuresInGrid);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Grid/Features/FeatureList",  empty);
    }
}

/** ArchEnt: HEARTH **/
onEvent("Hearth/Admin/Update", "delayclick", "saveHearth()");
onEvent("Hearth/Admin/Delete", "delayclick", "deleteHearth()");

onEvent("Hearth/Topography/attachPhoto", "click", "attachPictureTo(\"Hearth/Topography/Photos\")");
onEvent("Hearth/Topography/Update", "delayclick", "saveHearth()");
onEvent("Hearth/Topography/Delete", "delayclick", "deleteHearth()");

String hearth_id = null;

newHearth(){
    hearth_id = null;
    newTabGroup("Hearth");
    saveGrid();
}
loadHearth() {
    hearth_id = getListItemValue();
    loadHearthFrom(hearth_id);
}
loadHearthFrom(entid) {
    hearth_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Hearth", entid);    
}

saveHearth() {
    if (isNull(getFieldValue("Hearth/Admin/ID"))) { 
        showWarning("Validation Error", "Cannot save Hearth without identifier.");
        return;
    }
    if (!isNull(hearth_id)) {
        entity = fetchArchEnt(hearth_id);
    }
    saveTabGroup("Hearth", hearth_id, null, null, "hearth_id = getLastSavedRecordId();addReln(hearth_id, grid_id, null);");
}

deleteHearth(){
    if (!isNull(hearth_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Hearth!", "reallyDeleteHearth()", "doNotDelete()");
    }
}

reallyDeleteHearth(){
    deleteArchEnt(hearth_id);
    cancelTabGroup("Hearth", false);
    getCounterFromDB();
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadHearthAttributes() {
    populatePictureGallery("Hearth/Admin/HearthType", makePictureGallery("Hearth Type"));
    populatePictureGallery("Hearth/Admin/Charcoal", makePictureGallery("Charcoal"));
    populatePictureGallery("Hearth/Admin/DegreeInSitu", makePictureGallery("Degree in situ"));
    populatePictureGallery("Hearth/Admin/ModificationOfHeatRetainerHearths", makePictureGallery("Modification of heat retainer hearths"));
    populatePictureGallery("Hearth/Admin/ModificationOfNonHeatRetainerHearths", makePictureGallery("Modification of non heat retainer hearths"));
    // populateDropDown("Hearth/Associated_materials/AssociatedMaterial", makeVocab("Associated material"));
    // populateDropDown("Hearth/Associated_materials/LacustrineMaterial", makeVocab("Lacustrine Material"));
    // populateRadioGroup("Hearth/Associated_materials/BurntLacustrineMaterial", makeVocab("Burnt lacustrine material"));
    // populateDropDown("Hearth/Associated_materials/AssociatedTerrestrialBone", makeVocab("Associated terrestrial bone"));
    // populateRadioGroup("Hearth/Associated_materials/BurntBone", makeVocab("Burnt bone"));
    // populateDropDown("Hearth/Associated_materials/AssociatedEggshell", makeVocab("Associated eggshell"));
    // populateRadioGroup("Hearth/Associated_materials/BurntEggshell", makeVocab("Burnt eggshell"));
    // populateDropDown("Hearth/Associated_materials/AssociatedArtefacts", makeVocab("Associated artefacts"));
    // populateDropDown("Hearth/Associated_materials/CSTypes", makeVocab("CS types"));
    // populateDropDown("Hearth/Associated_materials/RUTypes", makeVocab("RU types"));
    // populateDropDown("Hearth/Associated_materials/UnmodTypes", makeVocab("Unmod types"));
    // populateDropDown("Hearth/Associated_materials/GroundMaterial", makeVocab("Ground material"));
    // populateRadioGroup("Hearth/Associated_materials/GroundMaterialStatus", makeVocab("Ground material status"));
    // populateDropDown("Hearth/Associated_materials/ArtefactRawMaterial", makeVocab("Artefact raw material"));
    // populateDropDown("Hearth/Associated_materials/OtherWorkedMaterial", makeVocab("Other worked material"));
    populatePictureGallery("Hearth/Topography/TopoSetting", makePictureGallery("Topo setting"));
    populatePictureGallery("Hearth/Topography/Sediments", makePictureGallery("Sediments"));
    populatePictureGallery("Hearth/Topography/Vulnerability", makePictureGallery("Vulnerability"));
    populatePictureGallery("Hearth/Topography/PalaeotopSetting", makePictureGallery("Palaeotop setting"));
    populateDropDown("Hearth/Topography/TypesOfPhotographsTaken", makeVocab("Types of Photographs taken"));

}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "';");
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

onEvent("user/usertab/users", "click", "login()");